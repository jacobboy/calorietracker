// tslint:disable
/**
 * USDA Report API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from '../runtime';
import {
    NutrientsMeasures,
    NutrientsMeasuresFromJSON,
    NutrientsMeasuresToJSON,
} from './';

/**
 * metadata elements for each nutrient included in the food report
 * @export
 * @interface Nutrients
 */
export interface Nutrients {
    /**
     * nutrient number (nutrient_no) for the nutrient
     * @type {string}
     * @memberof Nutrients
     */
    nutrientId: string;
    /**
     * nutrient name
     * @type {string}
     * @memberof Nutrients
     */
    name: string;
    /**
     * Indicator of how the value was derived
     * @type {string}
     * @memberof Nutrients
     */
    derivation: string;
    /**
     * unit of measure for this nutrient
     * @type {string}
     * @memberof Nutrients
     */
    unit: string;
    /**
     * 100 g equivalent value of the nutrient
     * @type {string}
     * @memberof Nutrients
     */
    value: string;
    /**
     * # of data points
     * @type {string}
     * @memberof Nutrients
     */
    dp?: string;
    /**
     * standard error
     * @type {string}
     * @memberof Nutrients
     */
    se?: string;
    /**
     * list of measures reported for a nutrient
     * @type {Array<NutrientsMeasures>}
     * @memberof Nutrients
     */
    measures: Array<NutrientsMeasures>;
}

export function NutrientsFromJSON(json: any): Nutrients {
    return {
        'nutrientId': json['nutrient_id'],
        'name': json['name'],
        'derivation': json['derivation'],
        'unit': json['unit'],
        'value': json['value'],
        'dp': !exists(json, 'dp') ? undefined : json['dp'],
        'se': !exists(json, 'se') ? undefined : json['se'],
        'measures': (json['measures'] as Array<any>).map(NutrientsMeasuresFromJSON),
    };
}

export function NutrientsToJSON(value?: Nutrients): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'nutrient_id': value.nutrientId,
        'name': value.name,
        'derivation': value.derivation,
        'unit': value.unit,
        'value': value.value,
        'dp': value.dp,
        'se': value.se,
        'measures': (value.measures as Array<any>).map(NutrientsMeasuresToJSON),
    };
}


