/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Macro Macro API
 * An API that provides access to recipe and ingredient information, both user-generated and sourced from the USDA
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost:5555".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError" = "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AmountOfIngredient
 */
export interface AmountOfIngredient {
    /**
     * 
     * @type {string}
     * @memberof AmountOfIngredient
     */
    uid?: string;
    /**
     * 
     * @type {number}
     * @memberof AmountOfIngredient
     */
    amount: number;
    /**
     * 
     * @type {string}
     * @memberof AmountOfIngredient
     */
    baseFood: string;
}

/**
 * 
 * @export
 * @interface Ingredient
 */
export interface Ingredient {
    /**
     * 
     * @type {string}
     * @memberof Ingredient
     */
    uid: string;
    /**
     * 
     * @type {string}
     * @memberof Ingredient
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof Ingredient
     */
    fat: number;
    /**
     * 
     * @type {number}
     * @memberof Ingredient
     */
    carbs: number;
    /**
     * 
     * @type {number}
     * @memberof Ingredient
     */
    protein: number;
    /**
     * 
     * @type {number}
     * @memberof Ingredient
     */
    calories: number;
    /**
     * 
     * @type {number}
     * @memberof Ingredient
     */
    amount: number;
    /**
     * 
     * @type {string}
     * @memberof Ingredient
     */
    unit: string;
}

/**
 * 
 * @export
 * @interface Meal
 */
export interface Meal {
    /**
     * 
     * @type {Array<AmountOfIngredient>}
     * @memberof Meal
     */
    foods: Array<AmountOfIngredient>;
}

/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {number}
     * @memberof ModelError
     */
    code: number;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    message: string;
}

/**
 * 
 * @export
 * @interface Recipe
 */
export interface Recipe {
    /**
     * 
     * @type {string}
     * @memberof Recipe
     */
    uid: string;
    /**
     * 
     * @type {Array<AmountOfIngredient>}
     * @memberof Recipe
     */
    foods: Array<AmountOfIngredient>;
}


/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new ingredient.  Duplicates are allowed.
         * @param {Ingredient} ingredient Ingredient to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addIngredient(ingredient: Ingredient, options: any = {}): FetchArgs {
            // verify required parameter 'ingredient' is not null or undefined
            if (ingredient === null || ingredient === undefined) {
                throw new RequiredError('ingredient','Required parameter ingredient was null or undefined when calling addIngredient.');
            }
            const localVarPath = `/ingredients`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Ingredient" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(ingredient || {}) : (ingredient || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new recipe.  Duplicates are allowed.
         * @param {Recipe} recipe Recipe to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRecipe(recipe: Recipe, options: any = {}): FetchArgs {
            // verify required parameter 'recipe' is not null or undefined
            if (recipe === null || recipe === undefined) {
                throw new RequiredError('recipe','Required parameter recipe was null or undefined when calling addRecipe.');
            }
            const localVarPath = `/recipes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Recipe" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(recipe || {}) : (recipe || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the ingredient specified by the UID
         * @param {string} uid UID of ingredient to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findIngredientByUID(uid: string, options: any = {}): FetchArgs {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling findIngredientByUID.');
            }
            const localVarPath = `/ingredients/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all ingredients the user has saved 
         * @param {string} [sort] sort key. options: recent
         * @param {number} [limit] maximum number of results to return. default: 10
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findIngredients(sort?: string, limit?: number, options: any = {}): FetchArgs {
            const localVarPath = `/ingredients`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the recipe specified by the UID
         * @param {string} uid UID of recipe to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findRecipeByUID(uid: string, options: any = {}): FetchArgs {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling findRecipeByUID.');
            }
            const localVarPath = `/recipes/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all ingredients the user has saved 
         * @param {string} [sort] sort key. options: recent
         * @param {number} [limit] maximum number of results to return. default: 10
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findRecipes(sort?: string, limit?: number, options: any = {}): FetchArgs {
            const localVarPath = `/recipes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a new ingredient.  Duplicates are allowed.
         * @param {Ingredient} ingredient Ingredient to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addIngredient(ingredient: Ingredient, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Ingredient> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).addIngredient(ingredient, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Creates a new recipe.  Duplicates are allowed.
         * @param {Recipe} recipe Recipe to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRecipe(recipe: Recipe, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Recipe> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).addRecipe(recipe, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns the ingredient specified by the UID
         * @param {string} uid UID of ingredient to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findIngredientByUID(uid: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Ingredient> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).findIngredientByUID(uid, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns all ingredients the user has saved 
         * @param {string} [sort] sort key. options: recent
         * @param {number} [limit] maximum number of results to return. default: 10
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findIngredients(sort?: string, limit?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Ingredient>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).findIngredients(sort, limit, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns the recipe specified by the UID
         * @param {string} uid UID of recipe to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findRecipeByUID(uid: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Recipe> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).findRecipeByUID(uid, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns all ingredients the user has saved 
         * @param {string} [sort] sort key. options: recent
         * @param {number} [limit] maximum number of results to return. default: 10
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findRecipes(sort?: string, limit?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Recipe>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).findRecipes(sort, limit, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Creates a new ingredient.  Duplicates are allowed.
         * @param {Ingredient} ingredient Ingredient to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addIngredient(ingredient: Ingredient, options?: any) {
            return DefaultApiFp(configuration).addIngredient(ingredient, options)(fetch, basePath);
        },
        /**
         * Creates a new recipe.  Duplicates are allowed.
         * @param {Recipe} recipe Recipe to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRecipe(recipe: Recipe, options?: any) {
            return DefaultApiFp(configuration).addRecipe(recipe, options)(fetch, basePath);
        },
        /**
         * Returns the ingredient specified by the UID
         * @param {string} uid UID of ingredient to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findIngredientByUID(uid: string, options?: any) {
            return DefaultApiFp(configuration).findIngredientByUID(uid, options)(fetch, basePath);
        },
        /**
         * Returns all ingredients the user has saved 
         * @param {string} [sort] sort key. options: recent
         * @param {number} [limit] maximum number of results to return. default: 10
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findIngredients(sort?: string, limit?: number, options?: any) {
            return DefaultApiFp(configuration).findIngredients(sort, limit, options)(fetch, basePath);
        },
        /**
         * Returns the recipe specified by the UID
         * @param {string} uid UID of recipe to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findRecipeByUID(uid: string, options?: any) {
            return DefaultApiFp(configuration).findRecipeByUID(uid, options)(fetch, basePath);
        },
        /**
         * Returns all ingredients the user has saved 
         * @param {string} [sort] sort key. options: recent
         * @param {number} [limit] maximum number of results to return. default: 10
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findRecipes(sort?: string, limit?: number, options?: any) {
            return DefaultApiFp(configuration).findRecipes(sort, limit, options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Creates a new ingredient.  Duplicates are allowed.
     * @param {Ingredient} ingredient Ingredient to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addIngredient(ingredient: Ingredient, options?: any) {
        return DefaultApiFp(this.configuration).addIngredient(ingredient, options)(this.fetch, this.basePath);
    }

    /**
     * Creates a new recipe.  Duplicates are allowed.
     * @param {Recipe} recipe Recipe to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addRecipe(recipe: Recipe, options?: any) {
        return DefaultApiFp(this.configuration).addRecipe(recipe, options)(this.fetch, this.basePath);
    }

    /**
     * Returns the ingredient specified by the UID
     * @param {string} uid UID of ingredient to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findIngredientByUID(uid: string, options?: any) {
        return DefaultApiFp(this.configuration).findIngredientByUID(uid, options)(this.fetch, this.basePath);
    }

    /**
     * Returns all ingredients the user has saved 
     * @param {string} [sort] sort key. options: recent
     * @param {number} [limit] maximum number of results to return. default: 10
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findIngredients(sort?: string, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).findIngredients(sort, limit, options)(this.fetch, this.basePath);
    }

    /**
     * Returns the recipe specified by the UID
     * @param {string} uid UID of recipe to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findRecipeByUID(uid: string, options?: any) {
        return DefaultApiFp(this.configuration).findRecipeByUID(uid, options)(this.fetch, this.basePath);
    }

    /**
     * Returns all ingredients the user has saved 
     * @param {string} [sort] sort key. options: recent
     * @param {number} [limit] maximum number of results to return. default: 10
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findRecipes(sort?: string, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).findRecipes(sort, limit, options)(this.fetch, this.basePath);
    }

}

